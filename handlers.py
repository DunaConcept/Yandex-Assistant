from googletrans import Translator  # pip install googletrans==4.0.0-rc1
from requests import get, codes  # pip install requests
from webbrowser import open
from random import randint
from time import sleep
import datetime

from config import WEATHER_KEY, CRYPTO_KEY


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
def calculate_expression(cmd):
    if '?' in cmd:
        expression = cmd[:cmd.find('?')].replace("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "")
    else:
        expression = cmd.replace("—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç", "")
    try:
        result = eval(expression)
        return print(f"ü§ñ: –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except SyntaxError:
        return "ü§ñ: –û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è."
    except ZeroDivisionError:
        return "ü§ñ: –î–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å –Ω–µ–ª—å–∑—è."
    except Exception as e:
        return f"ü§ñ: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}."


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
def get_current_date():
    date = [el for el in map(int, datetime.datetime.now().strftime("%d.%m.%Y").split('.'))]
    months = {
        1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è', 5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è',
        8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
    }
    current_date = f'{date[0]} {months[date[1]]} {date[-1]} –≥.'

    return print(f"ü§ñ: –°–µ–≥–æ–¥–Ω—è {current_date}")


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–¥ –ø–æ–≥–æ–¥—É emoji
# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ get_weather()
def get_emoji(weather_des):
    if 'clouds' in weather_des:
        return '‚òÅÔ∏è '
    elif 'rain' in weather_des:
        return 'üåßÔ∏è '
    elif 'snow' in weather_des:
        return 'üå®Ô∏è '
    elif 'clear' in weather_des:
        return '‚òÄÔ∏è '
    else:
        return ''


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
def get_weather():
    print('ü§ñ: –ü–æ–≥–æ–¥–∞ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?')
    city = input('‚ö™: ').strip().lower()
    api = WEATHER_KEY
    api_url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api}&units=metric'

    try:
        res = get(api_url)
        data = res.json()
        weather_description = data['weather'][0]['description']
        translator = Translator()
        translated_description = translator.translate(weather_description, dest='ru').text
        temperature = data['main']['temp']
        emoji = get_emoji(weather_description)
        response_text = (f"ü§ñ: –í –≥–æ—Ä–æ–¥–µ {city.capitalize()} —Å–µ–π—á–∞—Å {emoji}{translated_description}. "
                         f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C.")
        return print(response_text)
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
        if error_message != "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: 'weather'":
            return print(f"ü§ñ: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.")
        else:
            print('ü§ñ: –ì–æ—Ä–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ò.–ø. –∏ –±–µ–∑ –ø—Ä–µ–¥–ª–æ–≥–æ–≤.')
            return get_weather()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–æ –ª–µ—Ç–∞
def days_until_summer():
    today = datetime.datetime.today()
    current_month = today.month

    if 6 <= current_month <= 9:
        # –£–∂–µ –ª–µ—Ç–æ!
        return print('ü§ñ: –£–∂–µ –ª–µ—Ç–æ! üòé')
    elif current_month < 6:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –Ω–∞—á–∞–ª–∞ –ª–µ—Ç–∞
        summer_start = datetime.datetime(today.year, 6, 1)
        days = (summer_start - today).days + 1
        return print(f'ü§ñ: –î–æ –ª–µ—Ç–∞ {days} –¥–Ω–µ–π.')
    else:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ª–µ—Ç–∞
        next_year = today.year + 1
        summer_start = datetime.datetime(next_year, 6, 1)
        days = (summer_start - today).days
        return print(f'ü§ñ: –î–æ –ª–µ—Ç–∞ {days} –¥–Ω–µ–π.')


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞
def days_until_new_year():
    today = datetime.date.today()
    new_year = datetime.date(today.year + 1, 1, 1)

    if today.month == 12 and today.day == 31:
        # —É–∂–µ –ù–æ–≤—ã–π –≥–æ–¥!
        return print('ü§ñ: –£–∂–µ –ù–æ–≤—ã–π –≥–æ–¥! üéâ')
    else:
        # —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –ª–µ—Ç–∞
        days = (new_year - today).days
        return print(f'ü§ñ: –î–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ {days} –¥–Ω–µ–π.')


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_current_time():
    now = datetime.datetime.now()
    current_time = now.strftime("%H:%M")
    return print(f'ü§ñ: –°–µ–π—á–∞—Å {current_time}.')


def get_translate(cmd):
    translator = Translator()
    parts = cmd.split("–Ω–∞")

    if len(parts) != 2:
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: '–ü–µ—Ä–µ–≤–µ–¥–∏ {—Ñ—Ä–∞–∑–∞} –Ω–∞ {—è–∑—ã–∫}'"

    phrase = parts[0].strip()[10:-1]  # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    language = parts[1].strip()  # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —è–∑—ã–∫

    language_codes = {
        "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "en",
        "–∏—Å–ø–∞–Ω—Å–∫–∏–π": "es",
        "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "fr",
        "–Ω–µ–º–µ—Ü–∫–∏–π": "de",
        "—Ä—É—Å—Å–∫–∏–π": "ru",
        "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π": "it",
        "–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π": "pt",
        "–∫–∏—Ç–∞–π—Å–∫–∏–π": "zh",
        "—è–ø–æ–Ω—Å–∫–∏–π": "ja",
        "–∞—Ä–∞–±—Å–∫–∏–π": "ar",
        "—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π": "uk",
        "–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π": "be",
        "–∫–∞–∑–∞—Ö—Å–∫–∏–π": "kk",
        "–∫–∏—Ä–≥–∏–∑—Å–∫–∏–π": "ky",
        "—Ç–∞–¥–∂–∏–∫—Å–∫–∏–π": "tg",
        "—Ç—É—Ä–∫–º–µ–Ω—Å–∫–∏–π": "tk",
        "—É–∑–±–µ–∫—Å–∫–∏–π": "uz",
        "–∞—Ä–º—è–Ω—Å–∫–∏–π": "hy",
        "–∞–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π": "az",
        "–≥—Ä—É–∑–∏–Ω—Å–∫–∏–π": "ka",
        "–º–æ–ª–¥–∞–≤—Å–∫–∏–π": "mo",
        "—Ç–∞—Ç–∞—Ä—Å–∫–∏–π": "tt",
        "—ç—Å—Ç–æ–Ω—Å–∫–∏–π": "et"
    }

    if language in language_codes.keys():
        translate = translator.translate(phrase, dest=language_codes[language]).text
        return print(f'ü§ñ: "{phrase.capitalize()}" –Ω–∞ {language.capitalize()} —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ "{translate}".')
    else:
        print(f'ü§ñ: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é {language} —è–∑—ã–∫.')
        print(f'ü§ñ: –í–æ—Ç —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:', end=' ')
        return print(*(language_codes.keys()), sep=', ', end='.\n')


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
def get_crypto_price(cmd):
    if '?' in cmd:
        crypto = (cmd.split())[-1][:-1]
    else:
        crypto = (cmd.split())[-1]
    crypto_codes = {
        "bitcoin": "btc",
        "ethereum": "eth",
        "binance coin": "bnb",
        "solana": "sol",
        "cardano": "ada",
        "xrp": "xrp",
        "polkadot": "dot",
        "avalanche": "avax",
        "dogecoin": "doge",
        "chainlink": "link",
        "litecoin": "ltc",
        "algorand": "algo",
        "cosmos": "atom",
        "bitcoin cash": "bch",
        "stellar": "xlm"
    }
    if crypto in crypto_codes.keys():
        symbol = f'{crypto_codes[crypto].upper()}USDT'
    elif crypto in crypto_codes.values():
        symbol = f'{crypto.upper()}USDT'
    else:
        print('ü§ñ: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∫—É—Ä—Å –¥–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã')
        print('ü§ñ: –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∫—É—Ä—Å—ã –∫–æ—Ç–æ—Ä—ã—Ö —è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:', end=' ')
        return print(*crypto_codes, sep=', ')
    api_url = 'https://api.api-ninjas.com/v1/cryptoprice?symbol={}'.format(symbol)
    response = get(api_url, headers={'X-Api-Key': CRYPTO_KEY})
    if response.status_code == codes.ok:
        data = response.json()
        if crypto in crypto_codes.keys():
            return print(f'ü§ñ: –°—Ç–æ–∏–º–æ—Å—Ç—å {crypto.capitalize()}: {round(float(data["price"]))} $')
        elif crypto in crypto_codes.values():
            return print(f'ü§ñ: –°—Ç–æ–∏–º–æ—Å—Ç—å {crypto.upper()}: {round(float(data["price"]))} $')
    else:
        return print("–û—à–∏–±–∫–∞:", response.status_code, response.text)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∞–π—Ç–∞
def open_site(site):
    if site.startswith('https://'):
        url = site
    elif '.' in site:
        url = f'https://www.{site[:-1]}.com'
    else:
        url = f'https://www.{site}.com'

    print(f'ü§ñ: –û—Ç–∫—Ä—ã–≤–∞—é {url}.')
    return open(url)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç–∫–∏
def flip_coin():
    print('ü§ñ: –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é –º–æ–Ω–µ—Ç–∫—É..')
    sleep(3)
    result = randint(0, 1)
    if result == 0:
        return print('ü§ñ: –í—ã–ø–∞–ª ü¶Ö –æ—Ä–µ–ª.')
    else:
        return print('ü§ñ: –í—ã–ø–∞–ª–∞ ü™ô —Ä–µ—à–∫–∞.')
